# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI_vedio.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import time

import cv2
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtWidgets import QFileDialog, QLabel, QApplication, QMessageBox

from Paillier.Pvedio import Paillier


class vedio_MainWindow(object):
    def __init__(self):
        self.timer_camera = QTimer()
        self.vedio_path = None
        self.public_key = None
        self.private_key = None
        self.vedio_array = None
        self.frameCount = None
        self.frameWidth = None
        self.frameHeight = None
        self.fps = None

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(843, 676)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setEnabled(False)
        self.textEdit_2.setGeometry(QtCore.QRect(330, 380, 421, 171))
        self.textEdit_2.setObjectName("textEdit_2")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(340, 350, 171, 21))
        self.label_2.setObjectName("label_2")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setEnabled(False)
        self.textEdit.setGeometry(QtCore.QRect(330, 130, 421, 221))
        self.textEdit.setObjectName("textEdit")
        self.textEdit_4 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_4.setEnabled(False)
        self.textEdit_4.setGeometry(QtCore.QRect(50, 420, 171, 51))
        self.textEdit_4.setObjectName("textEdit_4")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(330, 100, 221, 31))
        self.label.setObjectName("label")
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(50, 30, 161, 311))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        # self.pushButton_4 = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        # self.pushButton_4.setObjectName("pushButton_4")
        # self.verticalLayout_4.addWidget(self.pushButton_4)
        self.radioButton = QtWidgets.QRadioButton(self.verticalLayoutWidget_3)
        self.radioButton.setObjectName("radioButton")
        self.verticalLayout_4.addWidget(self.radioButton)
        self.pushButton_3 = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.pushButton_3.clicked.connect(self.play)
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout_4.addWidget(self.pushButton_3)
        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.encryption)
        self.verticalLayout_4.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.decryption)
        self.verticalLayout_4.addWidget(self.pushButton_2)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(60, 370, 141, 16))
        self.label_3.setObjectName("label_3")
        self.textEdit_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_3.setEnabled(False)
        self.textEdit_3.setGeometry(QtCore.QRect(330, 20, 421, 87))
        self.textEdit_3.setObjectName("textEdit_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 843, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_2.setText(_translate("MainWindow", "Result"))
        self.label.setText(_translate("MainWindow", "Vedio"))
        # self.pushButton_4.setText(_translate("MainWindow", "Generate Key"))
        self.radioButton.setText(_translate("MainWindow", "Pailler"))
        self.pushButton_3.setText(_translate("MainWindow", "Open file"))
        self.pushButton.setText(_translate("MainWindow", "Encryption"))
        self.pushButton_2.setText(_translate("MainWindow", "Decryption"))
        self.label_3.setText(_translate("MainWindow", "Exectution time"))

    def encryption(self):
        if self.radioButton.isChecked():
            if self.vedio_path != '':
                start = time.time()
                cap = cv2.VideoCapture(self.vedio_path)
                self.frameCount = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
                self.frameWidth = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
                self.frameHeight = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
                self.fps = int(cap.get(cv2.CAP_PROP_FPS))

                array_o = np.empty((self.frameCount, self.frameHeight, self.frameWidth, 3), np.dtype('uint8'))
                num = 0
                ret = True
                fps = 10
                while (num < self.frameCount and ret):
                    ret, array_o[num] = cap.read()
                    num += 1
                ### generate keys
                p = Paillier()
                p.getKeys()
                self.public_key = p.publicKey
                self.private_key = p.privateKey
                ### decode the array for the video
                self.vedio_array = [[[[p.encrypt(int(x)) for x in row] for row in mat] for mat in frame] for frame in
                                  array_o]

                end = time.time()
                self.textEdit_3.setText(str(end - start))
            else:
                self.empty_messageDialog()

    def decryption(self):
        if self.radioButton.isChecked():
            if self.vedio_path != '':
                start = time.time()
                fourcc = cv2.VideoWriter_fourcc(*'MP42')

                p = Paillier()

                p.publicKey = self.public_key
                p.privateKey = self.private_key

                data_decrypted = [[[[p.decrypt(x) for x in row] for row in mat] for mat in frame] for frame in
                                  self.vedio_array]

                end = time.time()
                self.textEdit_3.setText(str(end - start))
                array_decode = np.array(data_decrypted, dtype=np.uint8)

                video = cv2.VideoWriter('decode v1.mp4', fourcc, float(self.fps), (self.frameWidth, self.frameHeight))
                for count in range(self.frameCount):
                    img = array_decode[count]
                    video.write(img)
            else:
                self.empty_messageDialog()

    def play(self):
        directory1 = QFileDialog.getOpenFileName(None, "select file", '', "")

        path = directory1[0]
        self.vedio_path = path



    def messageDialog(self):
        msg_box = QMessageBox(QMessageBox.Warning, 'warning', 'click the algorithm')
        msg_box.exec_()

    def empty_messageDialog(self):
        msg_box = QMessageBox(QMessageBox.Warning, 'warning', 'no key or text')
        msg_box.exec_()

    def empty_messageDialog2(self):
        msg_box = QMessageBox(QMessageBox.Warning, 'warning', 'no text')
        msg_box.exec_()
